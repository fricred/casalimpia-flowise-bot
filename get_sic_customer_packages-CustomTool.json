{
  "name": "get_sic_customer_packages",
  "description": "Obtiene los servicios/paquetes existentes de un cliente por cédula para reagendamiento",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"cedula\",\"type\":\"string\",\"description\":\"Cédula del cliente para buscar servicios existentes\",\"required\":true}]",
  "func": "/*\n* Casalimpia Custom Tool: get_sic_customer_packages\n* Obtiene servicios existentes del cliente por cédula\n* Variable: $cedula\n*/\n\nconst getSicCustomerPackages = async () => {\n  try {\n    const cedula = $cedula;\n    \n    if (!cedula) {\n      return JSON.stringify({\n        error: 'Cédula requerida',\n        message: 'Por favor proporciona tu número de cédula para buscar tus servicios'\n      });\n    }\n    \n    // Si usas API externa de Casalimpia\n    if (process.env.CASALIMPIA_API_BASE && process.env.CASALIMPIA_API_TOKEN) {\n      const response = await fetch(`${process.env.CASALIMPIA_API_BASE}/customer/packages`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.CASALIMPIA_API_TOKEN}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cedula: cedula\n        })\n      });\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return JSON.stringify({\n            packages: [],\n            total_packages: 0,\n            message: `No se encontraron servicios para la cédula *${cedula}*. ¿Quieres contratar un servicio nuevo? 🧹`\n          });\n        }\n        throw new Error(`API Error: ${response.status}`);\n      }\n      \n      const packages = await response.json();\n      \n      // Filtrar solo servicios activos/programados\n      const activePackages = packages.filter(pkg => \n        pkg.estado && !['completado', 'cancelado'].includes(pkg.estado.toLowerCase())\n      );\n      \n      return JSON.stringify({\n        packages: activePackages,\n        total_packages: activePackages.length,\n        customer_cedula: cedula,\n        message: activePackages.length > 0 \n          ? `Encontré *${activePackages.length}* servicio(s) para reagendar` \n          : 'No tienes servicios pendientes para reagendar'\n      });\n    }\n    \n    // Datos de ejemplo para testing sin API\n    const mockPackages = [\n      {\n        id: 'PKG001',\n        servicio: 'Limpieza - Jornada Mañana (4 Horas)',\n        fecha_actual: '2025-01-15',\n        hora_actual: '8:00 AM - 12:00 PM',\n        experta_actual: 'María González',\n        ciudad: 'BOGOTA',\n        estado: 'programado',\n        precio: 113150\n      },\n      {\n        id: 'PKG002',\n        servicio: 'Limpieza - Jornada Completa (8 Horas)',\n        fecha_actual: '2025-01-20',\n        hora_actual: '8:00 AM - 5:00 PM',\n        experta_actual: 'Carmen López',\n        ciudad: 'BOGOTA',\n        estado: 'programado',\n        precio: 159568\n      }\n    ];\n    \n    return JSON.stringify({\n      packages: mockPackages,\n      total_packages: mockPackages.length,\n      customer_cedula: cedula,\n      message: `📋 Encontré *${mockPackages.length}* servicio(s) programados:\\n\\n${mockPackages.map((pkg, i) => \n        `*${i+1}.* ${pkg.servicio}\\n📅 ${pkg.fecha_actual} (${pkg.hora_actual})\\n👤 Experta: ${pkg.experta_actual}\\n🏙️ Ciudad: ${pkg.ciudad}`\n      ).join('\\n\\n')}\\n\\n¿Cuál servicio quieres reagendar? 🔄`\n    });\n    \n  } catch (error) {\n    console.error('Error getting customer packages:', error);\n    return JSON.stringify({ \n      error: 'Failed to get customer packages',\n      packages: [],\n      message: 'Error al buscar tus servicios. Verifica tu cédula e intenta nuevamente.'\n    });\n  }\n};\n\nconst result = await getSicCustomerPackages();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}