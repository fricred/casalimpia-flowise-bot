{
  "name": "get_services",
  "description": "Obtiene los servicios disponibles para una ciudad específica, con opción de incluir precios",
  "color": "linear-gradient(rgb(79,195,196), rgb(251,252,59))",
  "iconSrc": null,
  "schema": "[{\"property\":\"city\",\"type\":\"string\",\"description\":\"Ciudad para consultar servicios disponibles\",\"required\":true,\"id\":0},{\"property\":\"include_prices\",\"type\":\"boolean\",\"description\":\"Incluir precios en la respuesta para consultas de precios\",\"required\":false,\"id\":1}]",
  "func": "/*\n* Casalimpia Custom Tool: get_services\n* Obtiene servicios disponibles por ciudad desde la API de Viernes for Business\n* Variables: $city, $include_prices\n*/\n\nconst getServices = async () => {\n  try {\n    const city = $city;\n    const baseUrl = $vars.api_url;\n    const includePrices = $include_prices || false;\n    \n    // Validar que city esté presente\n    if (!city) {\n      return JSON.stringify({\n        error: 'Ciudad requerida',\n        message: 'Por favor especifica la ciudad para consultar servicios disponibles.'\n      });\n    }\n    \n    console.log(`Getting services for city: ${city}, include_prices: ${includePrices}`);\n    \n    // Llamar a la API de Viernes for Business\n    const apiUrl = `${baseUrl}/tools/execute?base=casalimpia_sic&tool=get_services&pass_db=true`;\n    \n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        city: city,\n        include_prices: includePrices\n      })\n    });\n    \n    if (!response.ok) {\n      console.error(`API Error: ${response.status} - ${response.statusText}`);\n      throw new Error(`API Error: ${response.status}`);\n    }\n    \n    const apiResult = await response.json();\n    console.log('API Response:', apiResult);\n    \n    // Verificar el status de la respuesta\n    if (apiResult.status !== 'success') {\n      return JSON.stringify({\n        error: 'API Error',\n        message: apiResult.message || 'Error al obtener servicios.',\n        city: city,\n        status: apiResult.status\n      });\n    }\n    \n    // Procesar los servicios de la respuesta\n    let services = apiResult.data || [];\n    \n    // Filtrar y formatear servicios según la estructura real de la API\n    if (Array.isArray(services)) {\n      services = services.map((service, index) => {\n        return {\n          id: index + 1,\n          nombre: service.name,\n          precio: includePrices ? service.price : undefined,\n          sku_interno: service.sku // Campo interno para uso del sistema\n        };\n      });\n    }\n    \n    return JSON.stringify({\n      city: city,\n      services: services,\n      total_services: services.length,\n      include_prices: includePrices,\n      message: apiResult.message || `Servicios disponibles en *${city}*`,\n      success: true,\n      api_status: apiResult.status\n    });\n    \n  } catch (error) {\n    console.error('Error in get_services:', error);\n    throw error;\n  }\n};\n\nconst result = await getServices();\nreturn result;",
  "workspaceId": "413f5ad4-5b50-4162-a0d0-ba9bf2a19bce"
}