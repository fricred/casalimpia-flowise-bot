{
  "name": "get_sic_experts_list",
  "description": "Obtiene la lista de expertas disponibles para un servicio en fecha específica. NUNCA llamar sin fecha confirmada por usuario",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"city\",\"type\":\"string\",\"description\":\"Ciudad donde se requiere el servicio\",\"required\":true},{\"property\":\"date\",\"type\":\"string\",\"description\":\"Fecha del servicio en formato válido (CRITICAL: usuario debe confirmar fecha explícitamente)\",\"required\":true},{\"property\":\"service_type\",\"type\":\"string\",\"description\":\"Tipo de servicio seleccionado\",\"required\":true},{\"property\":\"service_sku\",\"type\":\"string\",\"description\":\"SKU del servicio para consultar expertas\",\"required\":false}]",
  "func": "/*\n* Casalimpia Custom Tool: get_sic_experts_list\n* Obtiene expertas disponibles - SOLO con fecha confirmada\n* Variables: $city, $date, $service_type, $service_sku\n*/\n\nconst getSicExpertsList = async () => {\n  try {\n    const city = $city;\n    const date = $date;\n    const serviceType = $service_type;\n    const serviceSku = $service_sku;\n    \n    // Validar que se proporcione fecha\n    if (!date) {\n      return JSON.stringify({\n        error: 'Fecha requerida',\n        message: 'CRÍTICO: No se puede consultar expertas sin fecha específica confirmada por el usuario'\n      });\n    }\n    \n    // Si usas API externa de Casalimpia\n    if (process.env.CASALIMPIA_API_BASE && process.env.CASALIMPIA_API_TOKEN) {\n      const response = await fetch(`${process.env.CASALIMPIA_API_BASE}/experts`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.CASALIMPIA_API_TOKEN}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ciudad: city.toUpperCase(),\n          fecha: date,\n          tipo_servicio: serviceType,\n          sku: serviceSku\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      \n      const experts = await response.json();\n      \n      // Filtrar campos sensibles y formatear respuesta\n      const filteredExperts = experts.map((expert, index) => {\n        const { cedula, Cédula, ...expertWithoutCedula } = expert;\n        return {\n          id: index + 1,\n          ...expertWithoutCedula,\n          _internal_cedula: cedula || Cédula // Mantener para uso interno\n        };\n      });\n      \n      return JSON.stringify({\n        city: city,\n        date: date,\n        service_type: serviceType,\n        experts: filteredExperts,\n        total_experts: filteredExperts.length\n      });\n    }\n    \n    // Datos de ejemplo para testing sin API\n    const mockExperts = [\n      {\n        id: 1,\n        nombre: 'María González',\n        experiencia: '3 años',\n        rating: 4.8,\n        especialidad: 'Limpieza residencial',\n        _internal_cedula: '12345678'\n      },\n      {\n        id: 2,\n        nombre: 'Ana Rodríguez',\n        experiencia: '5 años',\n        rating: 4.9,\n        especialidad: 'Limpieza profunda',\n        _internal_cedula: '87654321'\n      }\n    ];\n    \n    return JSON.stringify({\n      city: city,\n      date: date,\n      service_type: serviceType,\n      experts: mockExperts,\n      total_experts: mockExperts.length,\n      message: `Expertas disponibles para el *${date}* en *${city}*`\n    });\n    \n  } catch (error) {\n    console.error('Error getting experts:', error);\n    return JSON.stringify({ \n      error: 'Failed to get experts',\n      experts: [],\n      message: 'Error al obtener expertas disponibles'\n    });\n  }\n};\n\nconst result = await getSicExpertsList();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}