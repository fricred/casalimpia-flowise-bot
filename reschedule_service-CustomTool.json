{
  "name": "reschedule_service",
  "description": "Reagenda un servicio existente en el sistema SIC. Permite cambiar el experto y/o la fecha de servicio. Si se proporciona nombre de experta pero no cÃ©dula, busca la cÃ©dula automÃ¡ticamente. Valida disponibilidad cuando se cambia solo la fecha.",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"appointment_id\",\"type\":\"string\",\"description\":\"ID Ãºnico de la transacciÃ³n/cita que se desea reagendar (idTransaccion)\",\"required\":true,\"id\":0},{\"property\":\"customer_id\",\"type\":\"string\",\"description\":\"NÃºmero de cÃ©dula del cliente propietario de la cita\",\"required\":true,\"id\":1},{\"property\":\"ciudad_servicio\",\"type\":\"string\",\"description\":\"Ciudad donde se presta el servicio\",\"required\":true,\"id\":2},{\"property\":\"cedula\",\"type\":\"number\",\"description\":\"NÃºmero de cÃ©dula de la experta que se desea asignar al servicio (opcional si se proporciona nombre)\",\"required\":false,\"id\":3},{\"property\":\"nombre\",\"type\":\"string\",\"description\":\"Nombre de la experta que se desea asignar al servicio (opcional)\",\"required\":false,\"id\":4},{\"property\":\"service_date\",\"type\":\"string\",\"description\":\"Nueva fecha para el servicio en formato YYYY-MM-DD (opcional)\",\"required\":false,\"id\":5}]",
  "func": "/*\n* Casalimpia Custom Tool: reschedule_service\n* Reagenda un servicio existente desde la API de Viernes for Business\n* Variables: $appointment_id, $customer_id, $ciudad_servicio, $cedula, $nombre, $service_date\n*/\n\nconst rescheduleService = async () => {\n  try {\n    const appointmentId = $appointment_id;\n    const customerId = $customer_id;\n    const ciudadServicio = $ciudad_servicio;\n    const cedulaExperta = $cedula;\n    const nombreExperta = $nombre;\n    const serviceDate = $service_date;\n    const baseUrl = $vars.api_url;\n    \n    // Validar parÃ¡metros requeridos\n    if (!appointmentId || !customerId || !ciudadServicio) {\n      return JSON.stringify({\n        error: 'ParÃ¡metros requeridos faltantes',\n        message: 'Se requiere ID de la cita, cÃ©dula del cliente y ciudad del servicio.'\n      });\n    }\n    \n    // Validar que al menos se quiera cambiar algo\n    if (!cedulaExperta && !nombreExperta && !serviceDate) {\n      return JSON.stringify({\n        error: 'Sin cambios especificados',\n        message: 'Debe especificar al menos una experta (cÃ©dula o nombre) o una nueva fecha para reagendar.'\n      });\n    }\n    \n    console.log(`Rescheduling appointment: ${appointmentId} for customer: ${customerId}`);\n    \n    // Preparar el body con los parÃ¡metros disponibles\n    const requestBody = {\n      appointment_id: appointmentId,\n      customer_id: customerId,\n      ciudad_servicio: ciudadServicio\n    };\n    \n    // Agregar parÃ¡metros opcionales si estÃ¡n presentes\n    if (cedulaExperta) {\n      requestBody.cedula = parseInt(cedulaExperta);\n    }\n    \n    if (nombreExperta) {\n      requestBody.nombre = nombreExperta;\n    }\n    \n    if (serviceDate) {\n      requestBody.service_date = serviceDate;\n    }\n    \n    // Llamar a la API de Viernes for Business\n    const apiUrl = `${baseUrl}/tools/execute?base=casalimpia_sic&tool=reschedule_service&pass_db=true`;\n    \n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    \n    if (!response.ok) {\n      console.error(`API Error: ${response.status} - ${response.statusText}`);\n      throw new Error(`API Error: ${response.status}`);\n    }\n    \n    const apiResult = await response.json();\n    console.log('API Response:', apiResult);\n    \n    // Verificar el status de la respuesta\n    if (apiResult.status !== 'success') {\n      return JSON.stringify({\n        error: 'API Error',\n        message: apiResult.message || 'Error al reagendar el servicio.',\n        appointment_id: appointmentId,\n        status: apiResult.status\n      });\n    }\n    \n    // Construir mensaje de confirmaciÃ³n\n    let changesSummary = [];\n    if (serviceDate) {\n      changesSummary.push(`ðŸ“… *Nueva fecha*: ${serviceDate}`);\n    }\n    if (nombreExperta) {\n      changesSummary.push(`ðŸ‘¤ *Nueva experta*: ${nombreExperta}`);\n    }\n    \n    const confirmationMessage = changesSummary.length > 0 \n      ? `âœ… *Â¡Perfecto!* Tu servicio ha sido reagendado exitosamente.\\n\\n${changesSummary.join('\\n')}\\n\\nðŸ”„ *Estado*: Reagendado\\nðŸ“‹ *ID Cita*: ${appointmentId}\\n\\nÂ¡Que tengas un excelente dÃ­a! ðŸ§¹âœ¨`\n      : apiResult.message || 'Servicio reagendado exitosamente';\n    \n    return JSON.stringify({\n      appointment_id: appointmentId,\n      customer_id: customerId,\n      ciudad_servicio: ciudadServicio,\n      new_date: serviceDate,\n      new_expert_name: nombreExperta,\n      new_expert_cedula: cedulaExperta,\n      message: confirmationMessage,\n      success: true,\n      api_status: apiResult.status,\n      api_data: apiResult.data\n    });\n    \n  } catch (error) {\n    console.error('Error in reschedule_service:', error);\n    throw error;\n  }\n};\n\nconst result = await rescheduleService();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}