{
  "name": "get_sic_customer_packages",
  "description": "Obtiene los servicios/paquetes existentes de un cliente por cédula para reagendamiento",
  "color": "linear-gradient(rgb(170,135,14), rgb(135,214,86))",
  "iconSrc": null,
  "schema": "[{\"property\":\"customer_id\",\"type\":\"string\",\"description\":\"Cédula del cliente para buscar servicios existentes\",\"required\":true,\"id\":0}]",
  "func": "/*\n* Casalimpia Custom Tool: get_sic_customer_packages\n* Obtiene servicios existentes del cliente por cédula desde la API de Viernes for Business\n* Variable: $customer_id\n*/\nconst fetch = require('node-fetch');\n\n/*\n* Casalimpia Custom Tool: get_sic_customer_packages\n* Obtiene servicios existentes del cliente por cédula desde la API de Viernes for Business\n* Variable: $customer_id\n*/\n\nconst getSicCustomerPackages = async () => {\n  try {\n    const customerId = $customer_id;\n    const baseUrl = $vars.api_url;\n\n    // Validar que customer_id esté presente\n    if (!customerId) {\n      return JSON.stringify({\n        error: 'Cédula requerida',\n        message: 'Por favor proporciona tu número de cédula para buscar tus servicios existentes.'\n      });\n    }\n\n    console.log(`Getting customer packages for customer_id: ${customerId}`);\n\n    // Llamar a la API de Viernes for Business\n    const apiUrl = `${baseUrl}/tools/execute?base=casalimpia_sic&tool=get_sic_customer_packages&pass_db=true`;\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        customer_id: customerId\n      })\n    });\n\n    if (!response.ok) {\n      console.error(`API Error: ${response.status} - ${response.statusText}`);\n      throw new Error(`API Error: ${response.status}`);\n    }\n\n    const apiResult = await response.json();\n    console.log('API Response:', apiResult);\n\n    // Verificar el status de la respuesta\n    if (apiResult.status !== 'success') {\n      return JSON.stringify({\n        error: 'API Error',\n        message: apiResult.message || 'Error al obtener servicios del cliente.',\n        customer_id: customerId,\n        status: apiResult.status\n      });\n    }\n\n    // Procesar las citas de la respuesta (cambio de 'data' a 'appointments')\n    let appointments = apiResult.appointments || [];\n\n    // Filtrar y formatear citas según la estructura real de la API\n    if (Array.isArray(appointments)) {\n      appointments = appointments.map((appointment, index) => {\n        // Formatear horario para mostrar mejor\n        const horarioText = appointment.horario === 'completa' ? 'Jornada Completa (8 Horas)' :\n                           appointment.horario === 'manana' ? 'Jornada Mañana (4 Horas)' :\n                           appointment.horario === 'tarde' ? 'Jornada Tarde (4 Horas)' :\n                           appointment.horario;\n\n        return {\n          id: appointment.idTransaccion,\n          servicio: `Limpieza - ${horarioText}`,\n          fecha_actual: appointment.fecha,\n          hora_actual: appointment.horario,\n          experta_actual: appointment.nombreOperario,\n          ciudad: appointment.ciudad,\n          estado: 'programado', // Asumimos que están programados si vienen en la respuesta\n          precio: null, // No viene en la respuesta actual\n          ref_externa: appointment.refExterna,\n          telefono: appointment.telefono,\n          email: appointment.email,\n          fullName: appointment.fullName\n        };\n      });\n    }\n\n    return JSON.stringify({\n      customer_id: customerId,\n      packages: appointments,\n      total_packages: appointments.length,\n      message: appointments.length > 0\n        ? `📋 Encontré *${appointments.length}* servicio(s) programados para reagendar:\\n\\n${appointments.map((pkg, i) => \n            `*${i+1}.* ${pkg.servicio}\\n📅 ${pkg.fecha_actual}\\n👤 Experta: ${pkg.experta_actual}\\n🏙️ Ciudad: ${pkg.ciudad}\\n📞 Ref: ${pkg.ref_externa}`\n          ).join('\\n\\n')}\\n\\n¿Cuál servicio quieres reagendar? 🔄`\n        : 'No tienes servicios pendientes para reagendar. ¿Quieres contratar un servicio nuevo? 🧹',\n      success: true,\n      api_status: apiResult.status\n    });\n\n  } catch (error) {\n    console.error('Error in get_sic_customer_packages:', error);\n    throw error;\n  }\n};\n\nconst result = await getSicCustomerPackages();\nreturn result;",
  "workspaceId": "413f5ad4-5b50-4162-a0d0-ba9bf2a19bce"
}