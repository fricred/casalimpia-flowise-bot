{
  "name": "reschedule_service",
  "description": "Reagenda un servicio existente cambiando fecha, experta o ambos seg√∫n la solicitud del usuario",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"package_id\",\"type\":\"string\",\"description\":\"ID del paquete/servicio a reagendar\",\"required\":true},{\"property\":\"cedula\",\"type\":\"string\",\"description\":\"C√©dula del cliente propietario del servicio\",\"required\":true},{\"property\":\"nueva_fecha\",\"type\":\"string\",\"description\":\"Nueva fecha para el servicio (si se cambia)\",\"required\":false},{\"property\":\"nueva_experta_cedula\",\"type\":\"string\",\"description\":\"C√©dula de la nueva experta (si se cambia)\",\"required\":false},{\"property\":\"nueva_experta_nombre\",\"type\":\"string\",\"description\":\"Nombre de la nueva experta (para confirmaci√≥n)\",\"required\":false},{\"property\":\"tipo_cambio\",\"type\":\"string\",\"description\":\"Tipo de cambio: 'fecha', 'experta', o 'ambos'\",\"required\":true}]",
  "func": "/*\n* Casalimpia Custom Tool: reschedule_service\n* Reagenda servicio existente\n* Variables: $package_id, $cedula, $nueva_fecha, $nueva_experta_cedula, $nueva_experta_nombre, $tipo_cambio\n*/\n\nconst rescheduleService = async () => {\n  try {\n    const packageId = $package_id;\n    const cedula = $cedula;\n    const nuevaFecha = $nueva_fecha;\n    const nuevaExpertaCedula = $nueva_experta_cedula;\n    const nuevaExpertaNombre = $nueva_experta_nombre;\n    const tipoCambio = $tipo_cambio;\n    \n    // Validar par√°metros requeridos\n    if (!packageId || !cedula || !tipoCambio) {\n      return JSON.stringify({\n        success: false,\n        error: 'Par√°metros insuficientes',\n        message: 'Se requiere ID del servicio, c√©dula y tipo de cambio'\n      });\n    }\n    \n    // Validar tipo de cambio y par√°metros correspondientes\n    if (tipoCambio === 'fecha' && !nuevaFecha) {\n      return JSON.stringify({\n        success: false,\n        error: 'Nueva fecha requerida',\n        message: 'Se requiere la nueva fecha para el cambio'\n      });\n    }\n    \n    if (tipoCambio === 'experta' && (!nuevaExpertaCedula || !nuevaExpertaNombre)) {\n      return JSON.stringify({\n        success: false,\n        error: 'Nueva experta requerida',\n        message: 'Se requiere la informaci√≥n de la nueva experta'\n      });\n    }\n    \n    if (tipoCambio === 'ambos' && (!nuevaFecha || !nuevaExpertaCedula || !nuevaExpertaNombre)) {\n      return JSON.stringify({\n        success: false,\n        error: 'Informaci√≥n completa requerida',\n        message: 'Se requiere nueva fecha y nueva experta para el cambio completo'\n      });\n    }\n    \n    // Si usas API externa de Casalimpia\n    if (process.env.CASALIMPIA_API_BASE && process.env.CASALIMPIA_API_TOKEN) {\n      const response = await fetch(`${process.env.CASALIMPIA_API_BASE}/services/reschedule`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${process.env.CASALIMPIA_API_TOKEN}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          package_id: packageId,\n          cedula: cedula,\n          nueva_fecha: nuevaFecha,\n          nueva_experta_cedula: nuevaExpertaCedula,\n          nueva_experta_nombre: nuevaExpertaNombre,\n          tipo_cambio: tipoCambio\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      \n      return JSON.stringify({\n        success: true,\n        package_id: packageId,\n        changes_made: tipoCambio,\n        new_date: nuevaFecha,\n        new_expert: nuevaExpertaNombre,\n        message: result.message || 'Servicio reagendado exitosamente',\n        ...result\n      });\n    }\n    \n    // Simulaci√≥n para testing sin API\n    let changesSummary = [];\n    let confirmationMessage = '‚úÖ *¬°Perfecto!* Tu servicio ha sido reagendado exitosamente.\\n\\n';\n    \n    if (tipoCambio === 'fecha' || tipoCambio === 'ambos') {\n      changesSummary.push(`üìÖ *Nueva fecha*: ${nuevaFecha}`);\n    }\n    \n    if (tipoCambio === 'experta' || tipoCambio === 'ambos') {\n      changesSummary.push(`üë§ *Nueva experta*: ${nuevaExpertaNombre}`);\n    }\n    \n    confirmationMessage += changesSummary.join('\\n');\n    confirmationMessage += '\\n\\nüîÑ *Estado*: Reagendado\\nüìã *ID Servicio*: ' + packageId;\n    confirmationMessage += '\\n\\n¬°Que tengas un excelente d√≠a! üßπ‚ú®';\n    \n    return JSON.stringify({\n      success: true,\n      package_id: packageId,\n      customer_cedula: cedula,\n      changes_made: tipoCambio,\n      new_date: nuevaFecha,\n      new_expert: nuevaExpertaNombre,\n      new_expert_cedula: nuevaExpertaCedula,\n      timestamp: new Date().toISOString(),\n      message: confirmationMessage\n    });\n    \n  } catch (error) {\n    console.error('Error rescheduling service:', error);\n    return JSON.stringify({ \n      success: false,\n      error: 'Failed to reschedule service',\n      message: '‚ùå Error al reagendar el servicio. Por favor contacta a soporte: https://wa.me/573012926214'\n    });\n  }\n};\n\nconst result = await rescheduleService();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}