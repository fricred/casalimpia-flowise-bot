{
  "name": "create_service_cart_item",
  "description": "Agrega un servicio al carrito con todos los datos confirmados por el usuario",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"conversation_id\",\"type\":\"string\",\"description\":\"ID de la conversaci√≥n\",\"required\":true},{\"property\":\"sku\",\"type\":\"string\",\"description\":\"SKU del servicio seleccionado\",\"required\":true},{\"property\":\"nombre\",\"type\":\"string\",\"description\":\"Nombre de la experta seleccionada\",\"required\":true},{\"property\":\"cedula\",\"type\":\"string\",\"description\":\"C√©dula de la experta (uso interno)\",\"required\":true},{\"property\":\"fecha_servicio\",\"type\":\"string\",\"description\":\"Fecha confirmada del servicio\",\"required\":true},{\"property\":\"ciudad_servicio\",\"type\":\"string\",\"description\":\"Ciudad confirmada del servicio\",\"required\":true},{\"property\":\"jornada_servicio\",\"type\":\"string\",\"description\":\"Jornada/horario del servicio\",\"required\":true}]",
  "func": "/*\n* Casalimpia Custom Tool: create_service_cart_item\n* Agrega servicio confirmado al carrito\n* Variables: $conversation_id, $sku, $nombre, $cedula, $fecha_servicio, $ciudad_servicio, $jornada_servicio\n*/\n\nconst createServiceCartItem = async () => {\n  try {\n    const conversationId = $conversation_id || $flow.sessionId;\n    const sku = $sku;\n    const nombre = $nombre;\n    const cedula = $cedula;\n    const fechaServicio = $fecha_servicio;\n    const ciudadServicio = $ciudad_servicio;\n    const jornadaServicio = $jornada_servicio;\n    \n    // Si usas API externa de Casalimpia\n    if (process.env.CASALIMPIA_API_BASE && process.env.CASALIMPIA_API_TOKEN) {\n      const response = await fetch(`${process.env.CASALIMPIA_API_BASE}/cart/add`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.CASALIMPIA_API_TOKEN}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          conversation_id: conversationId,\n          sku: sku,\n          nombre: nombre,\n          cedula: cedula,\n          fecha_servicio: fechaServicio,\n          ciudad_servicio: ciudadServicio.toUpperCase(),\n          jornada_servicio: jornadaServicio\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      \n      return JSON.stringify({\n        success: true,\n        message: 'Servicio agregado al carrito exitosamente ‚úÖ',\n        cart_item: {\n          service: jornadaServicio,\n          date: fechaServicio,\n          city: ciudadServicio,\n          expert: nombre\n        },\n        ...result\n      });\n    }\n    \n    // Alternativa: usar Flow State como carrito temporal\n    const newCartItem = {\n      id: Date.now().toString(),\n      sku: sku,\n      service_name: jornadaServicio,\n      expert_name: nombre,\n      expert_cedula: cedula,\n      date: fechaServicio,\n      city: ciudadServicio.toUpperCase(),\n      created_at: new Date().toISOString()\n    };\n    \n    // Actualizar Flow State (esto se har√≠a autom√°ticamente en el Agent node)\n    const currentCart = $flow.state?.cart_items || [];\n    const updatedCart = [...currentCart, newCartItem];\n    \n    // Simular actualizaci√≥n del estado\n    const stateUpdate = {\n      cart_items: updatedCart,\n      user_city: ciudadServicio.toUpperCase(),\n      last_service_added: newCartItem\n    };\n    \n    return JSON.stringify({\n      success: true,\n      message: `‚úÖ *Perfecto!* He agregado el servicio a tu carrito:\\n\\nüßπ *Servicio*: ${jornadaServicio}\\nüìÖ *Fecha*: ${fechaServicio}\\nüèôÔ∏è *Ciudad*: ${ciudadServicio}\\nüë© *Experta*: ${nombre}\\n\\n¬øQu√© quieres hacer ahora?\\n\\n‚Ä¢ üõí Ver carrito completo\\n‚Ä¢ ‚ûï Agregar otro servicio\\n‚Ä¢ üí≥ Proceder al pago`,\n      cart_item: newCartItem,\n      total_items: updatedCart.length,\n      state_update: stateUpdate\n    });\n    \n  } catch (error) {\n    console.error('Error creating cart item:', error);\n    return JSON.stringify({ \n      success: false,\n      error: 'Failed to add service to cart',\n      message: '‚ùå Error al agregar servicio al carrito. Intenta nuevamente.'\n    });\n  }\n};\n\nconst result = await createServiceCartItem();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}