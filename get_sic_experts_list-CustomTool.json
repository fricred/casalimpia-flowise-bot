{
  "name": "get_sic_experts_list",
  "description": "Obtiene la lista de expertas de SIC Casalimpia disponibles (con nombre y cédula) para un servicio específico en una ciudad y fecha determinada. Solo soporta las 16 ciudades colombianas listadas en el enum. Opcionalmente se puede especificar una preferencia de experta por nombre, apellidos o cédula.",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"ciudad_servicio\",\"type\":\"string\",\"description\":\"Ciudad colombiana donde se prestará el servicio. Debe ser exactamente una de las opciones del enum\",\"required\":true,\"id\":0},{\"property\":\"fecha_servicio\",\"type\":\"string\",\"description\":\"La fecha en la que se desea que se preste el servicio (formato YYYY-MM-DD)\",\"required\":true,\"id\":1},{\"property\":\"jornada_servicio\",\"type\":\"string\",\"description\":\"Jornada en la que se desea que se preste el servicio\",\"required\":true,\"id\":2},{\"property\":\"preferencia_experta\",\"type\":\"string\",\"description\":\"Nombre, apellidos o cédula de la experta preferida (opcional). Enviar vacío si no se desea preferencia\",\"required\":true,\"id\":3}]",
  "func": "/*\n* Casalimpia Custom Tool: get_sic_experts_list\n* Obtiene expertas de SIC Casalimpia disponibles desde la API de Viernes for Business\n* Variables: $ciudad_servicio, $fecha_servicio, $jornada_servicio, $preferencia_experta\n*/\n\nconst getSicExpertsList = async () => {\n  try {\n    const ciudadServicio = $ciudad_servicio;\n    const fechaServicio = $fecha_servicio;\n    const jornadaServicio = $jornada_servicio;\n    const preferenciaExperta = $preferencia_experta || \"\";\n    const baseUrl = $vars.api_url;\n    \n    // Validar parámetros requeridos\n    if (!ciudadServicio || !fechaServicio || !jornadaServicio) {\n      return JSON.stringify({\n        error: 'Parámetros requeridos faltantes',\n        message: 'Se requiere ciudad de servicio, fecha de servicio y jornada de servicio.'\n      });\n    }\n    \n    // Validar formato de fecha\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!dateRegex.test(fechaServicio)) {\n      return JSON.stringify({\n        error: 'Formato de fecha inválido',\n        message: 'La fecha debe estar en formato YYYY-MM-DD (ejemplo: 2025-08-15).'\n      });\n    }\n    \n    console.log(`Getting experts list for city: ${ciudadServicio}, date: ${fechaServicio}, jornada: ${jornadaServicio}`);\n    \n    // Preparar el body con los parámetros\n    const requestBody = {\n      ciudad_servicio: ciudadServicio,\n      fecha_servicio: fechaServicio,\n      jornada_servicio: jornadaServicio,\n      preferencia_experta: preferenciaExperta\n    };\n    \n    // Llamar a la API de Viernes for Business\n    const apiUrl = `${baseUrl}/tools/execute?base=casalimpia_sic&tool=get_sic_experts_list&pass_db=true`;\n    \n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    \n    if (!response.ok) {\n      console.error(`API Error: ${response.status} - ${response.statusText}`);\n      throw new Error(`API Error: ${response.status}`);\n    }\n    \n    const apiResult = await response.json();\n    console.log('API Response:', apiResult);\n    \n    // Verificar el status de la respuesta\n    if (apiResult.status !== 'success') {\n      return JSON.stringify({\n        error: 'API Error',\n        message: apiResult.message || 'Error al obtener lista de expertas.',\n        ciudad_servicio: ciudadServicio,\n        status: apiResult.status\n      });\n    }\n    \n    // Procesar las expertas de la respuesta\n    let experts = apiResult.data || apiResult.experts || [];\n    \n    // Filtrar y formatear expertas según la estructura real de la API\n    if (Array.isArray(experts)) {\n      experts = experts.map((expert, index) => {\n        return {\n          id: expert.id || index + 1,\n          nombre: expert.name || expert.nombre,\n          cedula: expert.cedula || expert.id_cedula,\n          experiencia: expert.experience || expert.experiencia,\n          rating: expert.rating || expert.calificacion,\n          especialidad: expert.specialty || expert.especialidad,\n          disponible: expert.available !== undefined ? expert.available : true\n        };\n      });\n    }\n    \n    // Mensaje dinámico según si hay preferencia o no\n    let message = `👥 Expertas disponibles para el *${fechaServicio}* en *${ciudadServicio}*`;\n    if (preferenciaExperta && preferenciaExperta.trim() !== \"\") {\n      message += `\\n🔍 Búsqueda: \"${preferenciaExperta}\"`;\n    }\n    \n    if (experts.length > 0) {\n      message += `\\n\\n${experts.map((expert, i) => \n        `*${i+1}.* ${expert.nombre}\\n👤 Cédula: ${expert.cedula}\\n⭐ Rating: ${expert.rating || 'N/A'}\\n📋 Especialidad: ${expert.especialidad || 'Limpieza general'}`\n      ).join('\\n\\n')}`;\n      message += '\\n\\n¿Cuál experta prefieres para tu servicio? 👩‍🔧';\n    } else {\n      message += '\\n\\n❌ No hay expertas disponibles para esta fecha y jornada.';\n    }\n    \n    return JSON.stringify({\n      ciudad_servicio: ciudadServicio,\n      fecha_servicio: fechaServicio,\n      jornada_servicio: jornadaServicio,\n      preferencia_experta: preferenciaExperta,\n      experts: experts,\n      total_experts: experts.length,\n      message: message,\n      success: true,\n      api_status: apiResult.status\n    });\n    \n  } catch (error) {\n    console.error('Error in get_sic_experts_list:', error);\n    throw error;\n  }\n};\n\nconst result = await getSicExpertsList();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}