{
  "name": "get_services",
  "description": "Obtiene los servicios disponibles para una ciudad específica, con opción de incluir precios",
  "color": "linear-gradient(rgb(34,112,209), rgb(137,126,63))",
  "iconSrc": null,
  "schema": "[{\"property\":\"city\",\"type\":\"string\",\"description\":\"Ciudad para consultar servicios disponibles\",\"required\":true},{\"property\":\"include_prices\",\"type\":\"boolean\",\"description\":\"Incluir precios en la respuesta para consultas de precios\",\"required\":false}]",
  "func": "/*\n* Casalimpia Custom Tool: get_services\n* Obtiene servicios disponibles por ciudad con validación\n* Variables: $city, $include_prices\n*/\n\nconst getServices = async () => {\n  try {\n    const city = $city;\n    const includePrices = $include_prices || false;\n    \n    // Validar ciudades soportadas\n    const validCities = ['BOGOTA', 'MEDELLIN', 'CALI', 'BARRANQUILLA', 'BUCARAMANGA', 'BOYACA', 'PEREIRA', 'VILLAVICENCIO', 'IBAGUE', 'CARTAGENA', 'CHIA', 'COTA', 'CAJICA', 'PALMIRA', 'JAMUNDI', 'SANTA_MARTA'];\n    \n    if (!validCities.includes(city.toUpperCase())) {\n      return JSON.stringify({\n        error: 'Ciudad no soportada',\n        supported_cities: validCities,\n        message: `Lo siento, actualmente no tenemos cobertura en *${city}*. Nuestros servicios están disponibles en: ${validCities.join(', ')}.`\n      });\n    }\n    \n    // Si usas API externa de Casalimpia\n    if (process.env.CASALIMPIA_API_BASE && process.env.CASALIMPIA_API_TOKEN) {\n      const response = await fetch(`${process.env.CASALIMPIA_API_BASE}/services`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.CASALIMPIA_API_TOKEN}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ciudad: city.toUpperCase(),\n          include_prices: includePrices\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      \n      const services = await response.json();\n      \n      // Filtrar servicios disponibles y ocultar campos internos\n      const filteredServices = services\n        .filter(service => service['sell-web'] === 1)\n        .map((service, index) => {\n          const { sku, ...serviceWithoutSku } = service;\n          return {\n            id: index + 1,\n            ...serviceWithoutSku,\n            _internal_sku: sku // Mantener para uso interno\n          };\n        });\n      \n      return JSON.stringify({\n        city: city.toUpperCase(),\n        services: filteredServices,\n        total_services: filteredServices.length,\n        include_prices: includePrices\n      });\n    }\n    \n    // Datos de ejemplo para testing sin API\n    const mockServices = [\n      {\n        id: 1,\n        nombre: 'Servicio de limpieza - Jornada Mañana (4 Horas)',\n        duracion: '4 horas',\n        horario: '8:00 a.m a 12:00 p.m',\n        precio: includePrices ? 113150 : undefined,\n        _internal_sku: 'SERV_4H_MORNING'\n      },\n      {\n        id: 2,\n        nombre: 'Servicio de limpieza - Jornada Completa (8 Horas)',\n        duracion: '8 horas',\n        horario: '8:00 a.m a 5:00 p.m',\n        precio: includePrices ? 159568 : undefined,\n        _internal_sku: 'SERV_8H_FULL'\n      }\n    ];\n    \n    return JSON.stringify({\n      city: city.toUpperCase(),\n      services: mockServices,\n      total_services: mockServices.length,\n      include_prices: includePrices,\n      message: `Servicios disponibles en *${city.toUpperCase()}*`\n    });\n    \n  } catch (error) {\n    console.error('Error getting services:', error);\n    return JSON.stringify({ \n      error: 'Failed to get services',\n      city: $city,\n      services: [],\n      message: 'Error al obtener servicios. Intenta nuevamente.'\n    });\n  }\n};\n\nconst result = await getServices();\nreturn result;",
  "workspaceId": "3d76328e-d825-4824-92e0-dc840f47a68a"
}